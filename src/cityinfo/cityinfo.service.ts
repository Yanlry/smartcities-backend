// Chemin : backend/src/cityinfo/cityinfo.service.ts

import {
  Injectable,
  NotFoundException,
  BadRequestException,
  ForbiddenException,
} from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { UpsertCityInfoDto } from './dto/upsert-city-info.dto';

@Injectable()
export class CityInfoService {
  constructor(private prisma: PrismaService) {}

  /**
   * M√âTHODE 1 : R√©cup√©rer les infos d'une ville
   */
  async getCityInfo(cityName: string) {
    try {
      console.log('üèôÔ∏è Recherche des infos pour:', cityName);

      if (!cityName) {
        throw new BadRequestException('Le nom de la ville est requis');
      }

      const cityInfo = await this.prisma.cityInfo.findUnique({
        where: {
          cityName: cityName.toUpperCase(),
        },
      });

      if (!cityInfo) {
        throw new NotFoundException(
          'Cette ville n\'a pas encore configur√© ses informations'
        );
      }

      console.log('‚úÖ Infos trouv√©es pour:', cityName);
      return cityInfo;
    } catch (error) {
      console.error('‚ùå Erreur getCityInfo:', error.message);
      throw error;
    }
  }

  /**
   * ‚ú® NOUVELLE M√âTHODE : Mettre √† jour la photo du maire
   */
  async updateMayorPhoto(userId: number, cityName: string, photoUrl: string) {
    try {
      console.log('üì∏ Mise √† jour photo du maire');
      console.log('üë§ UserId:', userId);
      console.log('üèôÔ∏è Ville:', cityName);
      console.log('üñºÔ∏è URL photo:', photoUrl);

      // V√©rifier que l'utilisateur est une mairie
      const user = await this.prisma.user.findUnique({
        where: { id: userId },
        select: { isMunicipality: true },
      });

      if (!user || !user.isMunicipality) {
        throw new ForbiddenException('Acc√®s refus√©. Seules les mairies peuvent modifier cette information.');
      }

      // Mettre √† jour la photo dans la base de donn√©es
      const cityInfo = await this.prisma.cityInfo.upsert({
        where: {
          cityName: cityName.toUpperCase(),
        },
        update: {
          mayorPhoto: photoUrl,
        },
        create: {
          cityName: cityName.toUpperCase(),
          mayorPhoto: photoUrl,
        },
      });

      console.log('‚úÖ Photo du maire mise √† jour');
      return cityInfo;
    } catch (error) {
      console.error('‚ùå Erreur updateMayorPhoto:', error.message);
      throw error;
    }
  }

  /**
   * M√âTHODE 2 : Cr√©er ou modifier les infos d'une ville
   */
  async upsertCityInfo(userId: number, data: UpsertCityInfoDto) {
    try {
      console.log('üèõÔ∏è Sauvegarde pour userId:', userId);

      const user = await this.prisma.user.findUnique({
        where: { id: userId },
        select: {
          id: true,
          isMunicipality: true,
          nomCommune: true,
        },
      });

      if (!user) {
        throw new NotFoundException('Utilisateur non trouv√©');
      }

      if (!user.isMunicipality) {
        throw new ForbiddenException(
          'Acc√®s refus√©. Seules les mairies peuvent modifier ces informations.'
        );
      }

      console.log('‚úÖ Utilisateur v√©rifi√© : c\'est bien une mairie');

      const cityInfo = await this.prisma.cityInfo.upsert({
        where: {
          cityName: data.cityName.toUpperCase(),
        },
        update: {
          mayorName: data.mayorName,
          mayorPhone: data.mayorPhone,
          mayorPhoto: data.mayorPhoto,
          address: data.address,
          phone: data.phone,
          hours: data.hours,
          teamMembers: data.teamMembers as any,
          news: data.news as any,
          services: data.services as any,
        },
        create: {
          cityName: data.cityName.toUpperCase(),
          mayorName: data.mayorName,
          mayorPhone: data.mayorPhone,
          mayorPhoto: data.mayorPhoto,
          address: data.address,
          phone: data.phone,
          hours: data.hours,
          teamMembers: data.teamMembers as any,
          news: data.news as any,
          services: data.services as any,
        },
      });

      console.log('‚úÖ Sauvegarde r√©ussie pour:', data.cityName);
      return {
        message: 'Informations sauvegard√©es avec succ√®s',
        data: cityInfo,
      };
    } catch (error) {
      console.error('‚ùå Erreur upsertCityInfo:', error.message);
      throw error;
    }
  }

  /**
   * M√âTHODE 3 : V√©rifier si une ville a d√©j√† des infos
   */
  async checkCityInfoExists(cityName: string): Promise<boolean> {
    try {
      const cityInfo = await this.prisma.cityInfo.findUnique({
        where: {
          cityName: cityName.toUpperCase(),
        },
      });

      return !!cityInfo;
    } catch (error) {
      console.error('‚ùå Erreur checkCityInfoExists:', error.message);
      return false;
    }
  }

  /**
   * M√âTHODE 4 : Supprimer les infos d'une ville
   */
  async deleteCityInfo(cityName: string, userId: number) {
    try {
      console.log('üóëÔ∏è Suppression demand√©e pour:', cityName);

      const user = await this.prisma.user.findUnique({
        where: { id: userId },
        select: { isMunicipality: true },
      });

      if (!user || !user.isMunicipality) {
        throw new ForbiddenException('Acc√®s refus√©');
      }

      await this.prisma.cityInfo.delete({
        where: {
          cityName: cityName.toUpperCase(),
        },
      });

      console.log('‚úÖ Infos supprim√©es pour:', cityName);
      return { message: 'Informations supprim√©es avec succ√®s' };
    } catch (error) {
      console.error('‚ùå Erreur deleteCityInfo:', error.message);
      throw error;
    }
  }
}