generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int                        @id @default(autoincrement())
  email                     String                     @unique
  password                  String
  createdAt                 DateTime                   @default(now())
  refreshToken              String?
  resetToken                String?
  resetTokenExpiry          DateTime?
  trustRate                 Float?
  isSubscribed              Boolean                    @default(false)
  isMunicipality            Boolean                    @default(false)
  latitude                  Float?
  longitude                 Float?
  firstName                 String                     @default("Unknown")
  lastName                  String                     @default("Unknown")
  username                  String?                    @unique
  useFullName              Boolean                    @default(true) // Nouveau champ
  attendedEvents            Attendee[]
  comments                  Comment[]
  organizedEvents           Event[]                    @relation("UserEvents")
  ownedGroups               Group[]                    @relation("GroupOwnership")
  invites                   Invite[]
  likes                     Like[]
  messages                  Message[]                  @relation("UserMessages")
  notifications             Notification[]
  notificationSubscriptions NotificationSubscription[]
  photos                    Photo[]
  posts                     Post[]
  reports                   Report[]
  following                 UserFollow[]               @relation("FollowingRelation")
  followers                 UserFollow[]               @relation("FollowerRelation")
  votes                     Vote[]
  groups                    Group[]                    @relation("GroupMembers")
  conversations             Conversation[]             @relation("UserConversations")
}

model UserFollow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())
  follower    User     @relation("FollowingRelation", fields: [followerId], references: [id])
  following   User     @relation("FollowerRelation", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Group {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  ownerId     Int
  owner       User     @relation("GroupOwnership", fields: [ownerId], references: [id])
  members     User[]   @relation("GroupMembers")
}

model Report {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int
  latitude    Float     @default(0.0)
  longitude   Float     @default(0.0)
  type        String
  eventId     Int?
  radius      Float?
  city        String?
  downVotes   Int       @default(0)
  upVotes     Int       @default(0)
  comments    Comment[]
  photos      Photo[]
  event       Event?    @relation("EventReports", fields: [eventId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  votes       Vote[]
  ranking     Int? 
}

model Vote {
  id        Int      @id @default(autoincrement())
  type      String
  reportId  Int
  userId    Int
  createdAt DateTime @default(now())
  eventId   Int?
  event     Event?   @relation("EventVotes", fields: [eventId], references: [id])
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([reportId, userId])
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  reportId  Int?
  userId    Int
  postId    Int?
  post      Post?    @relation(fields: [postId], references: [id])
  report    Report?  @relation(fields: [reportId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  Int
  latitude  Float?
  longitude Float?
  comments  Comment[]
  likes     Like[]
  author    User      @relation(fields: [authorId], references: [id])
}

model Event {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  location    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  organizerId Int
  latitude    Float      @default(0.0)
  longitude   Float      @default(0.0)
  attendees   Attendee[]
  organizer   User       @relation("UserEvents", fields: [organizerId], references: [id])
  invites     Invite[]
  photos      Photo[]
  reports     Report[]   @relation("EventReports")
  votes       Vote[]     @relation("EventVotes")
}

model Photo {
  id        Int      @id @default(autoincrement())
  url       String   @unique
  isProfile  Boolean @default(false) // Indique si c'est une photo de profil
  eventId   Int?
  createdAt DateTime @default(now())
  reportId  Int?
  userId    Int?
  event     Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  report    Report?  @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Attendee {
  id      Int    @id @default(autoincrement())
  userId  Int
  eventId Int
  status  String
  event   Event  @relation(fields: [eventId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}

model Invite {
  id      Int      @id @default(autoincrement())
  eventId Int
  userId  Int
  status  String
  sentAt  DateTime @default(now())
  event   Event    @relation(fields: [eventId], references: [id])
  user    User     @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
}

model Conversation {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  isMunicipality Boolean   @default(false)
  messages       Message[]
  participants   User[]    @relation("UserConversations")
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String
  createdAt      DateTime     @default(now())
  isRead         Boolean      @default(false)
  senderId       Int
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation("UserMessages", fields: [senderId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int
  relatedId Int
  type      String
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model NotificationSubscription {
  id        Int      @id @default(autoincrement())
  userId    Int
  city      String?
  latitude  Float?
  longitude Float?
  radius    Float?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
